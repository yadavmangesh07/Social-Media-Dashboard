package com.analytics.social.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@Service
public class TwitterService {

    @Value("${twitter.bearer.token}")
    private String bearerToken;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    public String getUserTweets(String username) {
        // Step 1: Get user ID from username
        String userIdUrl = String.format("https://api.twitter.com/2/users/by/username/%s", username);
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + bearerToken);
        HttpEntity<String> entity = new HttpEntity<>(headers);

        try {
            ResponseEntity<String> userResponse = restTemplate.exchange(userIdUrl, HttpMethod.GET, entity, String.class);
            String userId = extractUserId(userResponse.getBody());

            // Step 2: Get tweets using user ID
            if (userId != null) {
                String tweetsUrl = String.format("https://api.twitter.com/2/users/%s/tweets", userId);
                ResponseEntity<String> tweetsResponse = restTemplate.exchange(tweetsUrl, HttpMethod.GET, entity, String.class);
                return tweetsResponse.getBody();
            }

            return "User not found";
        } catch (HttpClientErrorException e) {
            // Log the error and return a meaningful message
            System.err.println("Error fetching user data: " + e.getResponseBodyAsString());
            return "Error fetching user data";
        } catch (Exception e) {
            e.printStackTrace();
            return "An error occurred while fetching tweets";
        }
    }

    private String extractUserId(String responseBody) {
        try {
            JsonNode jsonNode = objectMapper.readTree(responseBody);
            return jsonNode.path("data").path("id").asText();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
